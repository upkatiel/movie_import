<?php
/**
 * @file
 * movie_import.module
 */
/**
 * Implements hook_menu().
 */
function movie_import_menu() {
    $items['import-movie'] = array(
        'title' => 'Import Movie',
        'page callback' => 'drupal_get_form',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'page arguments' => array('movie_import_form')
    );
    // Need at least one child item before your section will appear.
    $items['admin/config/content/movie-import'] = array(
        'title' => 'API Settings',
        'page callback' => 'drupal_get_form',
        'access arguments' => array('administer site configuration'),
        'file' => 'movie_import.admin.inc',
        'file path' => drupal_get_path('module', 'movie_import'),
        'type' => MENU_NORMAL_ITEM,
        'page arguments' => array('movie_import_admin_form')

    );
    return $items;
}
/**
 * Implements Form
 */
function movie_import_form() {
        $form = array();
            $form['title'] = array(
                '#type' => 'textfield',
                '#title' => t('Movie Title'),
                '#size' => 60,
                '#maxlength' => 128,
                '#required' => TRUE,
            );
            $form['submit'] = array(
              '#type' => 'submit',
              '#value' => t('Submit')
            );
    return $form;
}
/**
 *  Validate Form
 */
function movie_import_form_validate($form, &$form_state) {
    // Get our title from the form input
    $movie_title = $form_state['values']['title'];
    // If movie has been imported show error.
    $details = movie_import_check_movie_valid($movie_title);
    if (movie_import_check_movie_exists($movie_title)) :
        form_set_error('movie_title' , 'This film has been inported');
    endif;
    // If this isint a movie show error
    if (empty($details)) :
        form_set_error('movie_title' , 'This is not a film.');
    else :
        $form_state['values']['movie_details'] = $details;
    endif;

}
/**
 * Submit Form
 */
function movie_import_form_submit($form, &$form_state) {
    // Submission logic.
    $movie = $form_state['values']['movie_details'];
    $new_movie = movie_import_save_movie($movie);
    // Redirer to page
        if (!empty($new_movie)) :
            $form_state['redirect']  = $new_movie;
        endif;
}
/**
 * Check movie is not already imported
 */
function movie_import_check_movie_exists($movie_title) {
    // Check if movie exists
    $result = db_select('node' , 'n')->fields('n')->condition('title' , $movie_title , '=')->execute()->fetchAssoc();
    if (!empty($result['nid'])) :
        return TRUE;
    else :
        return FALSE;
    endif;
}
/**
 * Check movie exsits
 */
function movie_import_check_movie_valid($movie_title) {
    // Get API Settings
    $api_key = variable_get('movie_import_api_url');
    // Get response from API
    $movie_api_request = drupal_http_request(str_replace('%movie_name' , urlencode($movie_title) , $api_key));
    if ($movie_api_request->code == 200):
    // Decode our response
    $data = drupal_json_decode($movie_api_request->data);
      // If this is a movie return true;
        if ($data['Response'] && !empty($data['Type'])) :
            // Check this is a movie
            if ($data['Type'] === 'movie') :
                return $data;
            else :
              return FALSE;
            endif;
        else :
            return FALSE;
        endif;
    endif;
    return FALSE;
}
/**
 * Save Movie
 */

function movie_import_save_movie($movie) {
    global $user;
    // Get Poster for this movie
    $poster = movie_import_poster_image($movie['Poster'] ,  $movie['Title'] , $user->uid);
    // Get the release date for this movie
    $release_date = date("Y-m-d", strtotime($movie['Released']));
    // Get our terms
    $term_array = movie_import_term_id($movie['Genre']);
    // Node Content Values
    $node = new stdClass();
    $node->title = $movie['Title'];
    $node->type = "movie_review";
    $node->path = array('pathauto' => TRUE);
    $node->field_movie_review_movie_plot[LANGUAGE_NONE][0]['value'] = $movie['Plot'];
    $node->field_movie_review_netflix_link[LANGUAGE_NONE][0] = array(
        'url' => 'http://www.imdb.com/title/' . $movie['imdbID'],
        'attributes' => array('target' => 'default')
    );
    $node->field_movie_review_cinemas_link[LANGUAGE_NONE][0] = array(
        'url' => 'https://www.google.co.uk/movies?q=' . urlencode($movie['Title']),
        'attributes' => array('target' => 'default')
    );
    $node->field_movie_review_buy__link[LANGUAGE_NONE][0] = array(
        'url' => 'http://www.amazon.co.uk/s/ref=sr_nr_n_4?fst=as%3Aoff&rh=n%3A283926%2Ck%3Ai+am+legend&keywords=' . urlencode($movie['Title']) . '&ie=UTF8&qid=1442415156&rnid=1642204031',
        'attributes' => array('target' => 'default')
    );
    $node->field_movie_review_trailers_link[LANGUAGE_NONE][0] = array(
        'url' => 'https://www.youtube.com/results?search_query=' . urlencode($movie['Title']),
        'attributes' => array('target' => 'default')
    );
    $node->field_movie_review_release_date[LANGUAGE_NONE][0]['value'] = $release_date;
    $node->field_movie_review_main_image[LANGUAGE_NONE][0] = (array) $poster;
    // Term reference (taxonomy) field
    $node->field_movie_review_movie_genre[LANGUAGE_NONE] = $term_array;
    node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
    $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
    $node->uid = $user->uid;
    $node->status = 1; //(1 or 0): published or not
    $node->promote = 0; //(1 or 0): promoted to front page
    $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write
    // save the new node
    $node = node_submit($node); // Prepare node for saving
    node_save($node);
    $message = t('Success! Start adding your review for @name', array('@name' => $movie['Title']));
    drupal_set_message( $message );
    return  url(drupal_get_path_alias('node/' . $node->nid . '/edit'));
}
/**
 * Creates terms
 */
function movie_import_term_id($genres) {
    // Check if we have genres
    if ($genres) :
        // Find the id for our genre vocab
        $volcabulary = taxonomy_vocabulary_machine_name_load('genre');
        // Turn genres into an array
        $genres = explode(', ' , $genres);
        // Remove white spaces
        $genres = array_map('trim' , $genres);
        // Create a term array
        $terms = array();
        // Loop through our genres
        foreach ($genres as $key => $genre) {
            // Get a term if we already have it
            $is_term = taxonomy_get_term_by_name($genre , 'genre');
            // If we do get the ID and add it to the term array
            if ($is_term) :
                $term_array = reset($is_term);
                $terms[$term_array->name] = $term_array->tid;
            // If not create a new term
            else :
                $term = new stdClass();
                $term->name = $genre;
                $term->vid = $volcabulary->vid;
                $term->vocabulary_machine_name = 'genre';
                taxonomy_term_save($term);
                // Check term is not null
                if (!empty($term)) :
                    $terms[$term->name] = $term->tid;
                endif;
            endif;
        }
        // Create a new array structure to add to the node
            $new_term = array();
            foreach ($terms as $key => $term) {
                $new_term[] = array('tid' => $term);
            }
        return $new_term;
    endif;
}

/**
 * Creates poster image
 */
function movie_import_poster_image($poster , $title , $user_id) {
    // My Poster Image
    $get_poster = drupal_http_request($poster);
    // Sanitize the title
    $safe_filename = movie_import_san_file($title);
    // Set the file name with the mime ext (.jpg)
    $filename = $safe_filename . substr($poster , strrpos($poster , '.'), strlen($poster));
    // Check we have a image
    if ($get_poster->code == 200) :
        // Save the image
       file_unmanaged_save_data($get_poster->data , file_directory_temp() . '/' . $filename);
        // Set file object
       $file = (object) array(
            'uid' => $user_id,
            'uri' => file_directory_temp() . '/' . $filename,
            'filemime' => file_get_mimetype(file_directory_temp() . '/' . $filename),
            'status' => 1
        );
        // Copy to my public dir
    $file = file_copy($file , 'public://');
        // Return File
    return $file;
    endif;
}
/**
 * Sanitising
 */
function movie_import_san_file($file) {
    $file = preg_replace("([^\w\s\d\-_~,;:\[\]\(\).])", '', $file);
    $file = preg_replace("([\.]{2,})", '', $file);
    $file = str_replace(' ' , '_' , $file);
    $file = str_replace(':' , '' , $file);
    $file = str_replace('-' , '_' , $file);
    return $file;
}

